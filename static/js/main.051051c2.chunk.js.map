{"version":3,"sources":["components/drum-pad/drum-pad.jsx","components/display/displayPad.jsx","components/data/drumPad-data.js","components/drum-machine/drum-machine.jsx","App.js","serviceWorker.js","index.js"],"names":["DrumPad","props","playSound","bind","handleKey","document","addEventListener","this","removeEventListener","e","sound","getElementById","drum","innerText","currentTime","play","setState","value","id","replace","updateDisplay","console","log","keyCode","unicode","className","onClick","src","audioLink","Component","DisplayPad","DrumData","DrumMachine","state","data","sliderVal","currentId","message","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qVAqDeA,G,wDAhDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBAHA,E,gEAMjBE,SAASC,iBAAiB,UAAWC,KAAKH,a,2CAG1CC,SAASG,oBAAoB,UAAWD,KAAKH,a,gCAGrCK,GACR,IAAMC,EAAQL,SAASM,eAAT,UAA2BJ,KAAKN,MAAMW,KAAKC,YACzDH,EAAMI,YAAc,EACpBJ,EAAMK,OACNR,KAAKS,SAAS,CACZC,MAAOV,KAAKN,MAAMW,KAAKM,GAAGC,QAAQ,KAAM,MAE1CZ,KAAKN,MAAMmB,cAAcb,KAAKN,MAAMW,KAAKM,GAAI,KAC7CG,QAAQC,IAAIf,KAAKN,MAAMW,KAAKM,GAAGC,QAAQ,KAAM,O,gCAGrCV,GACJA,EAAEc,UAAYhB,KAAKN,MAAMW,KAAKY,UAChCjB,KAAKL,YACLK,KAAKN,MAAMmB,cAAcb,KAAKN,MAAMW,KAAKM,GAAI,Q,+BAK/C,OACE,4BACEA,GAAIX,KAAKN,MAAMW,KAAKM,GACpBO,UAAU,sBACVC,QAASnB,KAAKL,WAEbK,KAAKN,MAAMW,KAAKC,UACjB,2BACEY,UAAU,OACVP,GAAIX,KAAKN,MAAMW,KAAKC,UACpBc,IAAKpB,KAAKN,MAAMW,KAAKgB,iB,GA1CTC,cCYPC,G,6KAVX,OACE,yBAAKL,UAAU,qBACb,yBAAKP,GAAG,WACN,4BAAKX,KAAKN,MAAMgB,a,GALDY,cCwDVE,EA5DE,CACf,CACElB,UAAW,IACXK,GAAI,eACJM,QAAS,GACTI,UACE,0EAEJ,CACEf,UAAW,IACXK,GAAI,SACJM,QAAS,GACTI,UAAW,0DAEb,CACEf,UAAW,IACXK,GAAI,cACJM,QAAS,GACTI,UACE,iGAEJ,CACEf,UAAW,IACXK,GAAI,UACJM,QAAS,GACTI,UAAW,kEAEb,CACEf,UAAW,IACXK,GAAI,UACJM,QAAS,GACTI,UAAW,4DAEb,CACEf,UAAW,IACXK,GAAI,UACJM,QAAS,GACTI,UAAW,yDAEb,CACEf,UAAW,IACXK,GAAI,YACJM,QAAS,GACTI,UAAW,4DAEb,CACEf,UAAW,IACXK,GAAI,YACJM,QAAS,GACTI,UAAW,2CAEb,CACEf,UAAW,IACXK,GAAI,YACJM,QAAS,GACTI,UACE,2GCZSI,E,kDApCb,WAAY/B,GAAQ,IAAD,8BACjB,cAAMA,IACDgC,MAAQ,CACXC,KAAMH,EACNd,MAAO,QACPkB,UAAW,GACXC,UAAW,IANI,E,0DAULC,GACZ9B,KAAKS,SAAS,CACZC,MAAOoB,M,+BAID,IAAD,OACP,OACE,yBAAKnB,GAAG,eAAeO,UAAU,kBAC/B,yBAAKP,GAAG,WAAWO,UAAU,qBAC1BM,EAASO,KAAI,SAAA1B,GAAI,OAChB,kBAAC,EAAD,iBACM,EAAKqB,MADX,CAEEM,IAAK3B,EAAKM,GACVN,KAAMA,EACNY,QAAS,EAAKS,MAAMT,QACpBJ,cAAe,EAAKA,cAAcjB,KAAK,UAI7C,kBAAC,EAAD,CAAYc,MAAOV,KAAK0B,MAAMhB,a,GA/BZY,aCGXW,EALH,kBACV,yBAAKf,UAAU,OACb,kBAAC,EAAD,QCKgBgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS1C,SAASM,eAAe,SD6H3C,kBAAmBqC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.051051c2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./drum-pad.scss\";\r\n\r\nclass DrumPad extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.playSound = this.playSound.bind(this);\r\n    this.handleKey = this.handleKey.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    document.addEventListener(\"keydown\", this.handleKey);\r\n  }\r\n  componentWillMount() {\r\n    document.removeEventListener(\"keydown\", this.handleKey);\r\n  }\r\n\r\n  playSound(e) {\r\n    const sound = document.getElementById(`${this.props.drum.innerText}`);\r\n    sound.currentTime = 0;\r\n    sound.play();\r\n    this.setState({\r\n      value: this.props.drum.id.replace(/-/g, \"\")\r\n    });\r\n    this.props.updateDisplay(this.props.drum.id, 2000);\r\n    console.log(this.props.drum.id.replace(/-/g, \"\"));\r\n    // this.props.updateDisplay(this.props.drum.id.replace(/-/g, \"\"));\r\n  }\r\n  handleKey(e) {\r\n    if (e.keyCode === this.props.drum.unicode) {\r\n      this.playSound();\r\n      this.props.updateDisplay(this.props.drum.id, 2000);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button\r\n        id={this.props.drum.id}\r\n        className=\"pushbutton drum-pad\"\r\n        onClick={this.playSound}\r\n      >\r\n        {this.props.drum.innerText}\r\n        <audio\r\n          className=\"clip\"\r\n          id={this.props.drum.innerText}\r\n          src={this.props.drum.audioLink}\r\n        ></audio>\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DrumPad;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./displayPad.scss\";\r\n\r\nclass DisplayPad extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"display-component\">\r\n        <div id=\"display\">\r\n          <h2>{this.props.value}</h2>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DisplayPad;\r\n","const DrumData = [\r\n  {\r\n    innerText: \"Q\",\r\n    id: \"Cymbal-Crash\",\r\n    unicode: 81,\r\n    audioLink:\r\n      \"http://www.percussionclinic.com/sounds/instrumentclips/chinacymbal.mp3\"\r\n  },\r\n  {\r\n    innerText: \"W\",\r\n    id: \"Hi-Hat\",\r\n    unicode: 87,\r\n    audioLink: \"http://www.denhaku.com/r_box/sr16/sr16hat/sweethat.wav\"\r\n  },\r\n  {\r\n    innerText: \"E\",\r\n    id: \"Cymbal-Ride\",\r\n    unicode: 69,\r\n    audioLink:\r\n      \"http://dight310.byu.edu/media/audio/FreeLoops.com/1/1/909%20Ride%2003-5850-Free-Loops.com.mp3\"\r\n  },\r\n  {\r\n    innerText: \"A\",\r\n    id: \"Rimshot\",\r\n    unicode: 65,\r\n    audioLink: \"http://www.randomthink.net/labs/html5drums/drumkit/Rimshot.mp3\"\r\n  },\r\n  {\r\n    innerText: \"S\",\r\n    id: \"Snare-1\",\r\n    unicode: 83,\r\n    audioLink: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\"\r\n  },\r\n  {\r\n    innerText: \"D\",\r\n    id: \"Snare-2\",\r\n    unicode: 68,\r\n    audioLink: \"http://www.denhaku.com/r_box/sr16/sr16sd/batterrm.wav\"\r\n  },\r\n  {\r\n    innerText: \"Z\",\r\n    id: \"Tom-Tom-1\",\r\n    unicode: 90,\r\n    audioLink: \"http://www.denhaku.com/r_box/sr16/sr16tom/locan%20hl.wav\"\r\n  },\r\n  {\r\n    innerText: \"X\",\r\n    id: \"Tom-Tom-2\",\r\n    unicode: 88,\r\n    audioLink: \"http://tipiwiki.free.fr/snd/Tamtam2.wav\"\r\n  },\r\n  {\r\n    innerText: \"C\",\r\n    id: \"Bass Drum\",\r\n    unicode: 67,\r\n    audioLink:\r\n      \"http://dight310.byu.edu/media/audio/FreeLoops.com/1/1/Bass%20Drum%20Free%20002-1659-Free-Loops.com.mp3\"\r\n  }\r\n];\r\n\r\nexport default DrumData;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./drum-machine.scss\";\r\nimport DrumPad from \"../drum-pad/drum-pad\";\r\nimport DisplayPad from \"../display/displayPad\";\r\nimport DrumData from \"../data/drumPad-data\";\r\n\r\nclass DrumMachine extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: DrumData,\r\n      value: \"Sound\",\r\n      sliderVal: 0.3,\r\n      currentId: \"\"\r\n    };\r\n  }\r\n\r\n  updateDisplay(message) {\r\n    this.setState({\r\n      value: message\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"drum-machine\" className=\"drum-container\">\r\n        <div id=\"drum-pad\" className=\"drumpad-container\">\r\n          {DrumData.map(drum => (\r\n            <DrumPad\r\n              {...this.state}\r\n              key={drum.id}\r\n              drum={drum}\r\n              unicode={this.state.unicode}\r\n              updateDisplay={this.updateDisplay.bind(this)}\r\n            />\r\n          ))}\r\n        </div>\r\n        <DisplayPad value={this.state.value} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DrumMachine;\r\n","import React from \"react\";\n\nimport \"./App.css\";\nimport DrumMachine from \"./components/drum-machine/drum-machine\";\n\nconst App = () => (\n  <div className=\"App\">\n    <DrumMachine />\n  </div>\n);\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}